---
import '@/styles/global.css';
import { ViewTransitions } from 'astro:transitions';
import { Toaster } from 'sonner';
import { APP_CONFIG } from '@/config/app';

interface Props {
  title: string;
}

const { title } = Astro.props;
---

<!DOCTYPE html>
<html lang="es">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="description" content={APP_CONFIG.description} />
    <meta name="theme-color" content={APP_CONFIG.theme.themeColorDark} />

    <!-- TEMA: Método oficial de Astro con View Transitions -->
    <script is:inline>
      function applyTheme() {
        const theme = localStorage.getItem('theme') ||
                      (window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light');

        if (theme === 'dark') {
          document.documentElement.classList.add('dark');
        } else {
          document.documentElement.classList.remove('dark');
        }

        localStorage.setItem('theme', theme);
      }

      // Aplicar tema en carga inicial
      applyTheme();

      // Re-aplicar después de cada navegación (View Transitions oficial)
      document.addEventListener('astro:after-swap', applyTheme);
    </script>

    <!-- PWA Configuration -->
    <link rel="manifest" href="/manifest.json" />
    <link rel="icon" type="image/png" href="/favicon.png" />
    <link rel="apple-touch-icon" href="/logo_icon.png" />
    <meta name="mobile-web-app-capable" content="yes" />
    <meta name="apple-mobile-web-app-capable" content="yes" />
    <meta name="apple-mobile-web-app-status-bar-style" content="default" />
    <meta name="apple-mobile-web-app-title" content={APP_CONFIG.name} />

    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet" />
    <title>{title} - {APP_CONFIG.name}</title>

    <ViewTransitions />

    <!-- Service Worker Registration with Auto-Update -->
    <script is:inline>
      if ('serviceWorker' in navigator) {
        let refreshing = false;

        // Reload page when new service worker takes control
        navigator.serviceWorker.addEventListener('controllerchange', () => {
          if (!refreshing) {
            refreshing = true;
            console.log('New service worker activated, reloading page...');
            window.location.reload();
          }
        });

        window.addEventListener('load', () => {
          navigator.serviceWorker.register('/sw.js', {
            updateViaCache: 'none' // Don't cache the service worker file itself
          })
            .then(registration => {
              console.log('Service Worker registered:', registration);

              // Check for updates every 60 seconds
              setInterval(() => {
                registration.update();
              }, 60000);

              // Listen for waiting service worker
              registration.addEventListener('updatefound', () => {
                const newWorker = registration.installing;

                if (newWorker) {
                  newWorker.addEventListener('statechange', () => {
                    // If there's an existing controller (old SW), tell new SW to skip waiting
                    if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {
                      console.log('New service worker available, updating automatically...');
                      // Tell the new service worker to skip waiting and activate immediately
                      newWorker.postMessage({ type: 'SKIP_WAITING' });
                    }
                  });
                }
              });
            })
            .catch(error => {
              console.error('Service Worker registration failed:', error);
            });
        });
      }
    </script>

    <!-- Navigation Helper for View Transitions -->
    <script>
      import { navigate } from 'astro:transitions/client';

      // Exponer navigate globalmente para useNavigate hook
      if (typeof window !== 'undefined') {
        (window as any).astroNavigate = navigate;
      }
    </script>
  </head>
  <body>
    <Toaster
      position="top-right"
      richColors
      client:load
      expand={true}
      duration={3000}
    />
    <slot />

    <!-- TEMA: Toggle simple con delegación de eventos -->
    <script is:inline>
      function updateThemeButton() {
        const isDark = document.documentElement.classList.contains('dark');
        const btn = document.getElementById('theme-toggle');

        if (btn) {
          const moonIcon = btn.querySelector('[data-icon="moon"]');
          const sunIcon = btn.querySelector('[data-icon="sun"]');
          const darkText = btn.querySelector('[data-text="dark"]');
          const lightText = btn.querySelector('[data-text="light"]');

          if (isDark) {
            // Modo oscuro: mostrar sol para cambiar a claro
            if (moonIcon) moonIcon.classList.add('hidden');
            if (sunIcon) sunIcon.classList.remove('hidden');
            if (darkText) darkText.classList.add('hidden');
            if (lightText) lightText.classList.remove('hidden');
          } else {
            // Modo claro: mostrar luna para cambiar a oscuro
            if (moonIcon) moonIcon.classList.remove('hidden');
            if (sunIcon) sunIcon.classList.add('hidden');
            if (darkText) darkText.classList.remove('hidden');
            if (lightText) lightText.classList.add('hidden');
          }
        }
      }

      // Toggle al hacer clic (delegación de eventos - una sola vez)
      document.addEventListener('click', (e) => {
        if (e.target.closest('#theme-toggle')) {
          const isDark = document.documentElement.classList.contains('dark');
          localStorage.setItem('theme', isDark ? 'light' : 'dark');
          applyTheme();
          updateThemeButton();
        }
      });

      // Actualizar botón en carga inicial y después de navegaciones
      updateThemeButton();
      document.addEventListener('astro:after-swap', updateThemeButton);
    </script>
  </body>
</html>
